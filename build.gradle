/*
 */

buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.18.2"
  }
}

plugins {
    id "ca.coglinc.javacc" version "2.4.0"
    id "com.jfrog.bintray" version "1.8.4"
    id "org.sonarqube" version "2.7"
}

// Apply the java plugin to add support for Java
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "jacoco"
apply plugin: 'com.jfrog.artifactory'

version = '0.23.0'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    withJavadocJar()
    withSourcesJar()
}

ext {
    javaccOutput = file(project.buildDir.absolutePath + '/generated/javacc/')
    javaccSourcePath = project.buildDir.absolutePath + '/generated/javacc/'
    javaccSource = file(javaccSourcePath)
    mainSource = file('src/main/java/')
    testSource = file('src/test/java/')
}

eclipse {
    classpath {
        file {
            beforeMerged { classpath ->
                classpath.entries.add(new org.gradle.plugins.ide.eclipse.model.SourceFolder(javaccSourcePath, "bin"))
            }
        }
    }
}

idea.module {
    sourceDirs = [javaccSource, mainSource]
}
ideaModule.dependsOn compileJavacc

compileJavacc {
    inputDirectory = mainSource
    outputDirectory = javaccOutput
}

compileJava {
    source javaccSource,mainSource
}

compileTestJava {
    source javaccSource,mainSource,testSource
}

sonarqube {
    properties {
        property "sonar.sourceEncoding","UTF-8"
        property "sonar.java.binaries", "build/classes/main/"
        property "sonar.jacoco.reportPaths","build/jacoco/test.exec"
    }
}

task replaceVersion {
    doLast {
        ant.replaceregexp(match:'ch\\.poole([\\:/])OpeningHoursParser([\\:/])([0-9\\.]+)', replace:"ch.poole\\1OpeningHoursParser\\2${version}", flags:'g', byline:true) {
            fileset(dir: '.', includes: 'README.md')
        }
    }
}
build.dependsOn replaceVersion

task updateTranslations(type: Exec) {
    if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
        commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
    } else {
        commandLine 'tx', 'pull', '-a'
    }
}
updateTranslations.group = 'translation'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

task showDifferences(type: JavaExec) {
    main = "ch.poole.openinghoursparser.Diff"
    classpath = sourceSets.test.runtimeClasspath
    args('test-data/oh.txt-result', 'test-data/oh.txt-result-temp', 'test-data/oh.txt', 'test-data/diff.txt')
}
showDifferences.group = 'verification'
showDifferences.description = "Extract differences between reference test results and current results"

task showDifferencesStrict(type: JavaExec) {
    main = "ch.poole.openinghoursparser.Diff"
    classpath = sourceSets.test.runtimeClasspath
    args('test-data/oh.txt-result-strict', 'test-data/oh.txt-result-strict-temp', 'test-data/oh.txt', 'test-data/diff-strict.txt')
}
showDifferencesStrict.group = 'verification'
showDifferencesStrict.description = "Extract differences between reference test results and current results in strict mode"

// test input may change and require rerunning the tests
test.inputs.files("test-data/oh.txt")

ext {
    repoUrl = 'https://github.com/simonpoole/OpeningHoursParser.git'
    spdxId = 'MIT'
}

publishing {
    publications {
        Release(MavenPublication) {
            groupId 'ch.poole'
            artifactId 'OpeningHoursParser'
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            pom {
                url = 'https://github.com/simonpoole/OpeningHoursParser'
                scm {
                    url = repoUrl
                }
                licenses {
                    license {
                        name = spdxId
                        url = 'https://raw.githubusercontent.com/simonpoole/OpeningHoursParser/master/LICENCE.txt'
                    }
                }
                developers {
                    developer {
                        name = 'Simon Poole'
                    }
                }
            }
        }
        Snapshot(MavenPublication) {
            version = project.version + "-SNAPSHOT"
            groupId 'ch.poole'
            artifactId 'OpeningHoursParser'
            artifact jar
            artifact sourcesJar
            artifact javadocJar
        }
    }
}

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')
    publications = ['Release']
    pkg {
        repo = 'osm'
        name = 'OpeningHoursParser'
        licenses = [spdxId]
        vcsUrl = repoUrl
        version {
            name = "${project.version}"
            released  = new Date()
            gpg {
                sign = true //Determines whether to GPG sign the files. The default is false
                passphrase = System.getenv('BINTRAY_PASSPHRASE')
            }
        }
    }
}

artifactory {
    contextUrl = "https://oss.jfrog.org/artifactory"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        defaults {
            publications ('Snapshot')
        }
        repository {
            repoKey = 'oss-snapshot-local'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('ARTIFACTORY_PASSWORD')
            maven = true
        }
    }
    resolve {
        repository {
            repoKey = 'libs-snapshot'
            username = System.getenv('BINTRAY_USER')
            password = System.getenv('ARTIFACTORY_PASSWORD')
            maven = true         
        }
    }
}

// In this section you declare where to find the dependencies of your project
repositories {
    mavenCentral()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compileOnly 'org.jetbrains:annotations:19.0.0'
    testCompileOnly 'org.jetbrains:annotations:19.0.0'
    testCompile 'junit:junit:4.12'
}

